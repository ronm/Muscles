///***********
//*** BASE ***
//***********/


//.frame { overflow: scroll; }

.#{$flex_container_class} {
	margin-top: 0;
	margin-right: 0;
	margin-bottom: 0;
	margin-left: 0;
}


// MQ FLEX CSS

// formatted to be passed through
// loop to generate meida queries

@mixin base($breakpoint: '') {

	$size: if($breakpoint!='', $breakpoint, '');
	$separator: if($breakpoint!='', '-', '');

	// CONTAINER

	.#{$flex_container_class}#{$separator}#{$size} {
		//@include flex-align-content();
		//@include flex-align();
		@include flex-display();
		//@include flex-direction();
		@include flex-wrap();
		//@include flex-justify();

		
		&:not([class*="vertical"]) {
			margin-left: -#{$gutter};
			margin-right: -#{$gutter};
		}

		&.#{$size}#{$separator}vertical {
			margin-top: -#{$gutter};
			margin-bottom: -#{$gutter};
		}
	
	}
	
	.#{$flex_container_class}.#{$size}#{$separator}fill {
		&:not([class*="vertical"]) {
			margin-left: -.5rem !important;
			margin-right: -.5rem !important;
			width: calc(100% + 1rem) !important;
		}
		
		&.#{$flex_container_class}.#{$size}#{$separator}vertical {
			margin-top: -.5rem !important;
			margin-bottom: -.5rem !important;
			height: calc(100% + 1rem) !important;
		}
	}


	// ITEMS
	
	.#{$size}#{$separator}#{$flex_item_class} {
		@include flex();
		@include flex-grow(1);
	}	
	
	.#{$flex_container_class} {
		&:not(.#{$size}#{$separator}vertical) > [class*="#{$flex_item_class}"] {
			padding-left: $gutter;
			padding-right: $gutter;
		}

		@if $size {
			&.#{$size}#{$separator}vertical > .#{$size}#{$separator}#{$flex_item_class} {
				padding-top: $gutter;
				padding-bottom: $gutter;
				width: 100%;
			}
		}
	}


	// CONTAINER

	.#{$flex_container_class} {

		// justify-content (main axis)	
		&.#{$size}#{$separator}start { @include flex-justify(flex-start); }
		&.#{$size}#{$separator}end { @include flex-justify(flex-end); }
		&.#{$size}#{$separator}center { @include flex-justify(center); }
		&.#{$size}#{$separator}between { @include flex-justify(space-between); }
		&.#{$size}#{$separator}around { @include flex-justify(space-around); }
		
		// align-items (cross axis)
		&.#{$size}#{$separator}cross-start { @include flex-align(flex-start); }
		&.#{$size}#{$separator}cross-end { @include flex-align(flex-end); }
		&.#{$size}#{$separator}cross-center { @include flex-align(center); }
		&.#{$size}#{$separator}cross-baseline { @include flex-align(baseline); }
		&.#{$size}#{$separator}cross-stretch { @include flex-align(stretch); }
		
		// align-content (cross axis)
		&.#{$size}#{$separator}cross-align-start { @include flex-align-content(flex-start); }
		&.#{$size}#{$separator}cross-align-end { @include flex-align-content(flex-end); }
		&.#{$size}#{$separator}cross-align-center { @include flex-align-content(center); }
		&.#{$size}#{$separator}cross-align-between { @include flex-align-content(space-between); }
		&.#{$size}#{$separator}cross-align-around { @include flex-align-content(space-around); }
		&.#{$size}#{$separator}cross-align-stretch { @include flex-align-content(stretch); }
	
		// display
		&.#{$size}#{$separator}inline { @include flex-display('inline') }

		// direction
		&.#{$size}#{$separator}vertical { @include flex-direction(column); }

		//&.#{$size}#{$separator}.#{$size}#{$separator}reverse { @include flex-direction(row-reverse); }
		&.#{$size}#{$separator}reverse:not(.#{$size}#{$separator}vertical) { @include flex-direction(row-reverse); }
		&.#{$size}#{$separator}vertical.#{$size}#{$separator}reverse { @include flex-direction(column-reverse); }

		// wrap
		&.#{$size}#{$separator}reverse { @include flex-wrap(wrap-reverse); }
		&.#{$size}#{$separator}nowrap { @include flex-wrap(nowrap); }
	}


	// ITEMS

	// order
	.#{$flex_item_class} {
		&.#{$size}#{$separator}sticky { @include flex-order(-99); }
		&.#{$size}#{$separator}first { @include flex-order(-99); }
		&.#{$size}#{$separator}last { @include flex-order(99); }
	}

	// size (basis)
	@for $i from 1 through $subdivisions {
		$percentage: percentage($i/$subdivisions);

		// order
		.#{$flex_item_class}.#{$size}#{$separator}order-#{$i} { @include flex-order($i); }


		.#{$flex_container_class} {

			&:not(.#{$size}#{$separator}vertical)>.#{$size}#{$separator}#{$flex_item_class}-#{$i} {
				@include flex($percentage);
				max-width: $percentage;
			}

			&:not(.#{$size}#{$separator}vertical) > .#{$flex_item_class}-#{$size}#{$separator}#{$i},
			&:not(.#{$size}#{$separator}vertical).#{$size}#{$separator}items-#{$i} > .#{$flex_item_class} { 
				@include flex($percentage); 
				max-width: $percentage;
			}
	
			&.#{$size}#{$separator}vertical > .#{$flex_item_class}-#{$size}#{$separator}#{$i},
			&.#{$size}#{$separator}vertical-#{$size}#{$separator}items-#{$i} > #{$flex_item_class},
			&.#{$size}#{$separator}vertical-#{$size}#{$separator}items-#{$i} > .#{$size}-#{$flex_item_class} {
				@include flex($percentage);
				height: $percentage;
				//max-height: $percentage;
			}
	
			// OFFSETS
			// ltr row
			&:not(.vertical) > .#{$size}#{$separator}#{$flex_item_class}-offset-#{$i} { margin-left: $percentage; }
	
			// rtl row
			&.reverse:not(.#{$size}#{$separator}vertical) > .#{$size}#{$separator}#{$flex_item_class}-offset-#{$i} { margin-right: $percentage; }
	
			// ttb vertical
			&-vertical#{$separator}#{$size} > .#{$flex_item_class}[class~="#{$size}#{$separator}offset-#{$i}"] { margin-top: $percentage; }
	
			// btt vertical
			&-vertical#{$separator}#{$size} > .#{$flex_item_class}[class~="#{$size}#{$separator}offset-#{$i}"] { margin-bottom: $percentage; }
		}

	}


	.#{$flex_container_class} .#{$flex_item_class} {
		// fixed flex
		&.fixed#{$separator}#{$size} {
			@include flex-grow(0);
			@include flex-shrink(0);
		}

		// fluid flex
		&.fluid#{$separator}#{$size} {
			@include flex-grow(1);
			@include flex-shrink(1);
		}

		// align (self)
		&.#{$size}#{$separator}start { @include flex-self-align(flex-start); }
		&.#{$size}#{$separator}end { @include flex-self-align(flex-end); }
		&.#{$size}#{$separator}center { @include flex-self-align(center); }
		&.#{$size}#{$separator}baseline { @include flex-self-align(baseline); }
		&.#{$size}#{$separator}stretch { @include flex-self-align(stretch); }
	}

}



// BASE FLEX CSS

// include base flex css
// without media queries

@include base();



// MQ FLEX CSS

// include base flex css
// with media queries

//$mediaqueries: reverse($mediaqueries);
@each $size, $bp in $mediaqueries {
	//@media (min-width:nth($bp, 1)) {
	@media (min-width: map-get($bp, "min") ) {
		@include base($size);
    }
}
